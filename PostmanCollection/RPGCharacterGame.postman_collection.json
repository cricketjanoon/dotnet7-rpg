{
	"info": {
		"_postman_id": "e3d7f527-0904-4122-af35-902782f8fbff",
		"name": "RPG Character Game",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32549019"
	},
	"item": [
		{
			"name": "1. GetOneCharacterId1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.variables.set(\"Authorization\", \"bearer \" + pm.globals.get(\"jwttoken\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{jwttoken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5145/api/Character/GetOne/11",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5145",
					"path": [
						"api",
						"Character",
						"GetOne",
						"11"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "2. GetAllCharacters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{jwttoken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5145/api/Character/GetAll",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5145",
					"path": [
						"api",
						"Character",
						"GetAll"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "3. AddCharacter",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{jwttoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n//   \"id\": 5, auto increment is enabled\r\n  \"name\": \"jcena1\",\r\n  \"hitPoints\": 2,\r\n  \"strength\": 9,\r\n  \"defense\": 5,\r\n  \"intelligence\": 2,\r\n  \"class\": \"Knight\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5145/api/Character/AddNewCharacter",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5145",
					"path": [
						"api",
						"Character",
						"AddNewCharacter"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. UpdateCharacter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{jwttoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 12,\n  \"name\": \"test run\",\n  \"hitPoints\": 1,\n  \"strength\": 2,\n  \"defense\": 3,\n  \"intelligence\": 4,\n  \"class\": \"Knight\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5145/api/Character/UpdateCharacter",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5145",
					"path": [
						"api",
						"Character",
						"UpdateCharacter"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "5. DeleteCharacter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{jwttoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5145/api/Character/Delete/14",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5145",
					"path": [
						"api",
						"Character",
						"Delete",
						"14"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "6. RegisterUser",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"john\",\r\n  \"password\": \"882154\"\r\n}\r\n\r\n// 1, shahbaz, 882154\r\n// 2, john, 882154\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5145/Auth/Register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5145",
					"path": [
						"Auth",
						"Register"
					]
				}
			},
			"response": []
		},
		{
			"name": "7. Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var obj = pm.response.json()[\"data\"];\r",
							"pm.globals.set(\"jwttoken\", obj);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"john\",\r\n  \"password\": \"882154\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5145/Auth/Login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5145",
					"path": [
						"Auth",
						"Login"
					]
				}
			},
			"response": []
		},
		{
			"name": "8. AddWeapon",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{jwttoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"The gun\",\r\n    \"damage\": 5,\r\n    \"characterId\": 13\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5145/Weapon",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5145",
					"path": [
						"Weapon"
					]
				}
			},
			"response": []
		},
		{
			"name": "9. AddSkill",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{jwttoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"characterId\": 11,\r\n    \"skillId\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5145/api/Character/AddSkill",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5145",
					"path": [
						"api",
						"Character",
						"AddSkill"
					]
				}
			},
			"response": []
		},
		{
			"name": "10. Attack With Weapon",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"attackerId\": 13,\r\n  \"opponentId\": 11\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5145/Fight/AttachWithWeapon",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5145",
					"path": [
						"Fight",
						"AttachWithWeapon"
					]
				}
			},
			"response": []
		},
		{
			"name": "11. Attack With Skill",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{jwttoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"attackerId\": 11,\r\n  \"opponentId\": 13,\r\n  \"skillId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5145/Fight/AttackWithSkill",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5145",
					"path": [
						"Fight",
						"AttackWithSkill"
					]
				}
			},
			"response": []
		},
		{
			"name": "12. StartFight",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{jwttoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"charasterIds\": [\r\n    9, 11, 13\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5145/Fight/StartFight",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5145",
					"path": [
						"Fight",
						"StartFight"
					]
				}
			},
			"response": []
		},
		{
			"name": "13. Get High Scores",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5145/Fight/GetHighScore",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5145",
					"path": [
						"Fight",
						"GetHighScore"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}